// @flow
import * as React from 'react'
import type {
  FormApi,
  Config,
  Decorator,
  FormState,
  FormSubscription,
  FieldSubscription,
  FieldValidator
} from 'final-form'

type SupportedInputs = 'input' | 'select' | 'textarea'

export type ReactContext = {
  reactFinalForm: FormApi
}

export type FieldRenderProps = {
  input: {
    name: string,
    onBlur: (?SyntheticFocusEvent<*>) => void,
    onChange: (SyntheticInputEvent<*> | any) => void,
    onFocus: (?SyntheticFocusEvent<*>) => void,
    value: any,
    checked?: boolean
  },
  meta: {
    // TODO: Make a diff of `FieldState` without all the functions
    active?: boolean,
    data?: Object,
    dirty?: boolean,
    dirtySinceLastSubmit?: boolean,
    error?: any,
    initial?: boolean,
    invalid?: boolean,
    pristine?: boolean,
    submitError?: any,
    submitFailed?: boolean,
    submitSucceeded?: boolean,
    submitting?: boolean,
    touched?: boolean,
    valid?: boolean,
    visited?: boolean
  }
}

export type SubsetFormApi = {
  blur: (name: string) => void,
  change: (name: string, value: any) => void,
  focus: (name: string) => void,
  initialize: (values: Object) => void,
  mutators: { [string]: Function },
  reset: () => void
} & FormState

export type FormRenderProps = {
  handleSubmit: (?SyntheticEvent<HTMLFormElement>) => ?Promise<?Object>,
  form: FormApi
} & FormState &
  SubsetFormApi

export type FormSpyRenderProps = {
  form: FormApi
} & SubsetFormApi &
  FormState

export type RenderableProps<T> = {
  component?: React.ComponentType<*> | SupportedInputs,
  children?: ((props: T) => React.Node) | React.Node,
  render?: (props: T) => React.Node
}

export type FormProps = {
  subscription?: FormSubscription,
  decorators?: Decorator[],
  initialValuesEqual?: (?Object, ?Object) => boolean
} & Config &
  RenderableProps<FormRenderProps>

export type FieldProps = {
  allowNull?: boolean,
  format?: (value: any, name: string) => any,
  formatOnBlur?: boolean,
  isEqual?: (a: any, b: any) => boolean,
  name: string,
  parse?: (value: any, name: string) => any,
  subscription?: FieldSubscription,
  validate?: FieldValidator,
  validateFields?: string[],
  value?: any
} & RenderableProps<FieldRenderProps> & {
    component?: React.ComponentType<*> | SupportedInputs
  }

export type FieldPropsWithForm = {
  reactFinalForm: FormApi
} & FieldProps

export type FormSpyProps = {
  onChange?: (formState: FormState) => void,
  subscription?: FormSubscription
} & RenderableProps<FormSpyRenderProps>

export type FormSpyPropsWithForm = {
  reactFinalForm: FormApi
} & FormSpyProps
